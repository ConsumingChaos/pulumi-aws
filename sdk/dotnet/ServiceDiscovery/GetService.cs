// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.ServiceDiscovery
{
    public static class GetService
    {
        /// <summary>
        /// Retrieves information about a Service Discovery Service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Aws.ServiceDiscovery.GetService.InvokeAsync(new Aws.ServiceDiscovery.GetServiceArgs
        ///         {
        ///             Name = "example",
        ///             NamespaceId = "NAMESPACE_ID_VALUE",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServiceResult> InvokeAsync(GetServiceArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceResult>("aws:servicediscovery/getService:getService", args ?? new GetServiceArgs(), options.WithDefaults());

        /// <summary>
        /// Retrieves information about a Service Discovery Service.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Aws.ServiceDiscovery.GetService.InvokeAsync(new Aws.ServiceDiscovery.GetServiceArgs
        ///         {
        ///             Name = "example",
        ///             NamespaceId = "NAMESPACE_ID_VALUE",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetServiceResult> Invoke(GetServiceInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetServiceResult>("aws:servicediscovery/getService:getService", args ?? new GetServiceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServiceArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the service.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// The ID of the namespace that the service belongs to.
        /// </summary>
        [Input("namespaceId", required: true)]
        public string NamespaceId { get; set; } = null!;

        [Input("tags")]
        private Dictionary<string, string>? _tags;

        /// <summary>
        /// A map of tags to assign to the service. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public Dictionary<string, string> Tags
        {
            get => _tags ?? (_tags = new Dictionary<string, string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private Dictionary<string, string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public Dictionary<string, string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new Dictionary<string, string>());
            set => _tagsAll = value;
        }

        public GetServiceArgs()
        {
        }
    }

    public sealed class GetServiceInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the service.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The ID of the namespace that the service belongs to.
        /// </summary>
        [Input("namespaceId", required: true)]
        public Input<string> NamespaceId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// A map of tags to assign to the service. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("tagsAll")]
        private InputMap<string>? _tagsAll;

        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public InputMap<string> TagsAll
        {
            get => _tagsAll ?? (_tagsAll = new InputMap<string>());
            set => _tagsAll = value;
        }

        public GetServiceInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceResult
    {
        /// <summary>
        /// The ARN of the service.
        /// </summary>
        public readonly string Arn;
        /// <summary>
        /// The description of the service.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// A complex type that contains information about the resource record sets that you want Amazon Route 53 to create when you register an instance.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceDnsConfigResult> DnsConfigs;
        /// <summary>
        /// A complex type that contains settings for an optional health check. Only for Public DNS namespaces.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceHealthCheckConfigResult> HealthCheckConfigs;
        /// <summary>
        /// A complex type that contains settings for ECS managed health checks.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceHealthCheckCustomConfigResult> HealthCheckCustomConfigs;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        /// <summary>
        /// The ID of the namespace to use for DNS configuration.
        /// </summary>
        public readonly string NamespaceId;
        /// <summary>
        /// A map of tags to assign to the service. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Tags;
        /// <summary>
        /// A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
        /// </summary>
        public readonly ImmutableDictionary<string, string> TagsAll;

        [OutputConstructor]
        private GetServiceResult(
            string arn,

            string description,

            ImmutableArray<Outputs.GetServiceDnsConfigResult> dnsConfigs,

            ImmutableArray<Outputs.GetServiceHealthCheckConfigResult> healthCheckConfigs,

            ImmutableArray<Outputs.GetServiceHealthCheckCustomConfigResult> healthCheckCustomConfigs,

            string id,

            string name,

            string namespaceId,

            ImmutableDictionary<string, string>? tags,

            ImmutableDictionary<string, string> tagsAll)
        {
            Arn = arn;
            Description = description;
            DnsConfigs = dnsConfigs;
            HealthCheckConfigs = healthCheckConfigs;
            HealthCheckCustomConfigs = healthCheckCustomConfigs;
            Id = id;
            Name = name;
            NamespaceId = namespaceId;
            Tags = tags;
            TagsAll = tagsAll;
        }
    }
}
