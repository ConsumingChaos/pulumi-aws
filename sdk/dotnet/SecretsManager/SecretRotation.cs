// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Aws.SecretsManager
{
    /// <summary>
    /// Provides a resource to manage AWS Secrets Manager secret rotation. To manage a secret, see the [`aws.secretsmanager.Secret` resource](https://www.terraform.io/docs/providers/aws/r/secretsmanager_secret.html). To manage a secret value, see the [`aws.secretsmanager.SecretVersion` resource](https://www.terraform.io/docs/providers/aws/r/secretsmanager_secret_version.html).
    /// 
    /// ## Example Usage
    /// 
    /// ### Basic
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Aws = Pulumi.Aws;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var example = new Aws.SecretsManager.SecretRotation("example", new Aws.SecretsManager.SecretRotationArgs
    ///         {
    ///             RotationLambdaArn = aws_lambda_function.Example.Arn,
    ///             RotationRules = new Aws.SecretsManager.Inputs.SecretRotationRotationRulesArgs
    ///             {
    ///                 AutomaticallyAfterDays = 30,
    ///             },
    ///             SecretId = aws_secretsmanager_secret.Example.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class SecretRotation : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies whether automatic rotation is enabled for this secret.
        /// </summary>
        [Output("rotationEnabled")]
        public Output<bool> RotationEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies the ARN of the Lambda function that can rotate the secret.
        /// </summary>
        [Output("rotationLambdaArn")]
        public Output<string> RotationLambdaArn { get; private set; } = null!;

        /// <summary>
        /// A structure that defines the rotation configuration for this secret. Defined below.
        /// </summary>
        [Output("rotationRules")]
        public Output<Outputs.SecretRotationRotationRules> RotationRules { get; private set; } = null!;

        /// <summary>
        /// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
        /// </summary>
        [Output("secretId")]
        public Output<string> SecretId { get; private set; } = null!;

        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a SecretRotation resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SecretRotation(string name, SecretRotationArgs args, CustomResourceOptions? options = null)
            : base("aws:secretsmanager/secretRotation:SecretRotation", name, args ?? new SecretRotationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SecretRotation(string name, Input<string> id, SecretRotationState? state = null, CustomResourceOptions? options = null)
            : base("aws:secretsmanager/secretRotation:SecretRotation", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SecretRotation resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SecretRotation Get(string name, Input<string> id, SecretRotationState? state = null, CustomResourceOptions? options = null)
        {
            return new SecretRotation(name, id, state, options);
        }
    }

    public sealed class SecretRotationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies the ARN of the Lambda function that can rotate the secret.
        /// </summary>
        [Input("rotationLambdaArn", required: true)]
        public Input<string> RotationLambdaArn { get; set; } = null!;

        /// <summary>
        /// A structure that defines the rotation configuration for this secret. Defined below.
        /// </summary>
        [Input("rotationRules", required: true)]
        public Input<Inputs.SecretRotationRotationRulesArgs> RotationRules { get; set; } = null!;

        /// <summary>
        /// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
        /// </summary>
        [Input("secretId", required: true)]
        public Input<string> SecretId { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SecretRotationArgs()
        {
        }
    }

    public sealed class SecretRotationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies whether automatic rotation is enabled for this secret.
        /// </summary>
        [Input("rotationEnabled")]
        public Input<bool>? RotationEnabled { get; set; }

        /// <summary>
        /// Specifies the ARN of the Lambda function that can rotate the secret.
        /// </summary>
        [Input("rotationLambdaArn")]
        public Input<string>? RotationLambdaArn { get; set; }

        /// <summary>
        /// A structure that defines the rotation configuration for this secret. Defined below.
        /// </summary>
        [Input("rotationRules")]
        public Input<Inputs.SecretRotationRotationRulesGetArgs>? RotationRules { get; set; }

        /// <summary>
        /// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.
        /// </summary>
        [Input("secretId")]
        public Input<string>? SecretId { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public SecretRotationState()
        {
        }
    }
}
