// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mediaconvert

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an AWS Elemental MediaConvert Queue.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/media_convert_queue.html.markdown.
type Queue struct {
	s *pulumi.ResourceState
}

// NewQueue registers a new resource with the given unique name, arguments, and options.
func NewQueue(ctx *pulumi.Context,
	name string, args *QueueArgs, opts ...pulumi.ResourceOpt) (*Queue, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["name"] = nil
		inputs["pricingPlan"] = nil
		inputs["reservationPlanSettings"] = nil
		inputs["status"] = nil
		inputs["tags"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["name"] = args.Name
		inputs["pricingPlan"] = args.PricingPlan
		inputs["reservationPlanSettings"] = args.ReservationPlanSettings
		inputs["status"] = args.Status
		inputs["tags"] = args.Tags
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:mediaconvert/queue:Queue", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Queue{s: s}, nil
}

// GetQueue gets an existing Queue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetQueue(ctx *pulumi.Context,
	name string, id pulumi.ID, state *QueueState, opts ...pulumi.ResourceOpt) (*Queue, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["description"] = state.Description
		inputs["name"] = state.Name
		inputs["pricingPlan"] = state.PricingPlan
		inputs["reservationPlanSettings"] = state.ReservationPlanSettings
		inputs["status"] = state.Status
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("aws:mediaconvert/queue:Queue", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Queue{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Queue) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Queue) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The Arn of the queue
func (r *Queue) Arn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["arn"])
}

// A description of the queue
func (r *Queue) Description() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["description"])
}

// A unique identifier describing the queue
func (r *Queue) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are `ON_DEMAND` or `RESERVED`. Default to `ON_DEMAND`.
func (r *Queue) PricingPlan() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["pricingPlan"])
}

// A detail pricing plan of the  reserved queue. See below.
func (r *Queue) ReservationPlanSettings() pulumi.Output {
	return r.s.State["reservationPlanSettings"]
}

// A status of the queue. Valid values are `ACTIVE` or `RESERVED`. Default to `PAUSED`.
func (r *Queue) Status() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["status"])
}

// A mapping of tags to assign to the resource.
func (r *Queue) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Queue resources.
type QueueState struct {
	// The Arn of the queue
	Arn interface{}
	// A description of the queue
	Description interface{}
	// A unique identifier describing the queue
	Name interface{}
	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are `ON_DEMAND` or `RESERVED`. Default to `ON_DEMAND`.
	PricingPlan interface{}
	// A detail pricing plan of the  reserved queue. See below.
	ReservationPlanSettings interface{}
	// A status of the queue. Valid values are `ACTIVE` or `RESERVED`. Default to `PAUSED`.
	Status interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}

// The set of arguments for constructing a Queue resource.
type QueueArgs struct {
	// A description of the queue
	Description interface{}
	// A unique identifier describing the queue
	Name interface{}
	// Specifies whether the pricing plan for the queue is on-demand or reserved. Valid values are `ON_DEMAND` or `RESERVED`. Default to `ON_DEMAND`.
	PricingPlan interface{}
	// A detail pricing plan of the  reserved queue. See below.
	ReservationPlanSettings interface{}
	// A status of the queue. Valid values are `ACTIVE` or `RESERVED`. Default to `PAUSED`.
	Status interface{}
	// A mapping of tags to assign to the resource.
	Tags interface{}
}
