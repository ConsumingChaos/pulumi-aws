// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package ecs

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/ecs_capacity_provider.html.markdown.
type CapacityProvider struct {
	s *pulumi.ResourceState
}

// NewCapacityProvider registers a new resource with the given unique name, arguments, and options.
func NewCapacityProvider(ctx *pulumi.Context,
	name string, args *CapacityProviderArgs, opts ...pulumi.ResourceOpt) (*CapacityProvider, error) {
	if args == nil || args.AutoScalingGroupProvider == nil {
		return nil, errors.New("missing required argument 'AutoScalingGroupProvider'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["autoScalingGroupProvider"] = nil
		inputs["name"] = nil
		inputs["tags"] = nil
	} else {
		inputs["autoScalingGroupProvider"] = args.AutoScalingGroupProvider
		inputs["name"] = args.Name
		inputs["tags"] = args.Tags
	}
	inputs["arn"] = nil
	s, err := ctx.RegisterResource("aws:ecs/capacityProvider:CapacityProvider", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CapacityProvider{s: s}, nil
}

// GetCapacityProvider gets an existing CapacityProvider resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCapacityProvider(ctx *pulumi.Context,
	name string, id pulumi.ID, state *CapacityProviderState, opts ...pulumi.ResourceOpt) (*CapacityProvider, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["arn"] = state.Arn
		inputs["autoScalingGroupProvider"] = state.AutoScalingGroupProvider
		inputs["name"] = state.Name
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("aws:ecs/capacityProvider:CapacityProvider", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &CapacityProvider{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *CapacityProvider) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *CapacityProvider) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The Amazon Resource Name (ARN) that identifies the capacity provider.
func (r *CapacityProvider) Arn() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["arn"])
}

// Nested argument defining the provider for the ECS auto scaling group. Defined below.
func (r *CapacityProvider) AutoScalingGroupProvider() pulumi.Output {
	return r.s.State["autoScalingGroupProvider"]
}

// The name of the capacity provider.
func (r *CapacityProvider) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Key-value mapping of resource tags.
func (r *CapacityProvider) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering CapacityProvider resources.
type CapacityProviderState struct {
	// The Amazon Resource Name (ARN) that identifies the capacity provider.
	Arn interface{}
	// Nested argument defining the provider for the ECS auto scaling group. Defined below.
	AutoScalingGroupProvider interface{}
	// The name of the capacity provider.
	Name interface{}
	// Key-value mapping of resource tags.
	Tags interface{}
}

// The set of arguments for constructing a CapacityProvider resource.
type CapacityProviderArgs struct {
	// Nested argument defining the provider for the ECS auto scaling group. Defined below.
	AutoScalingGroupProvider interface{}
	// The name of the capacity provider.
	Name interface{}
	// Key-value mapping of resource tags.
	Tags interface{}
}
