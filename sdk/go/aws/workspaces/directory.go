// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package workspaces

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a directory registration in AWS WorkSpaces Service
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-aws/blob/master/website/docs/r/workspaces_directory.html.markdown.
type Directory struct {
	s *pulumi.ResourceState
}

// NewDirectory registers a new resource with the given unique name, arguments, and options.
func NewDirectory(ctx *pulumi.Context,
	name string, args *DirectoryArgs, opts ...pulumi.ResourceOpt) (*Directory, error) {
	if args == nil || args.DirectoryId == nil {
		return nil, errors.New("missing required argument 'DirectoryId'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["directoryId"] = nil
		inputs["selfServicePermissions"] = nil
		inputs["subnetIds"] = nil
		inputs["tags"] = nil
	} else {
		inputs["directoryId"] = args.DirectoryId
		inputs["selfServicePermissions"] = args.SelfServicePermissions
		inputs["subnetIds"] = args.SubnetIds
		inputs["tags"] = args.Tags
	}
	s, err := ctx.RegisterResource("aws:workspaces/directory:Directory", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Directory{s: s}, nil
}

// GetDirectory gets an existing Directory resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDirectory(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DirectoryState, opts ...pulumi.ResourceOpt) (*Directory, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["directoryId"] = state.DirectoryId
		inputs["selfServicePermissions"] = state.SelfServicePermissions
		inputs["subnetIds"] = state.SubnetIds
		inputs["tags"] = state.Tags
	}
	s, err := ctx.ReadResource("aws:workspaces/directory:Directory", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Directory{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Directory) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Directory) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The directory identifier for registration in WorkSpaces service.
func (r *Directory) DirectoryId() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["directoryId"])
}

// The permissions to enable or disable self-service capabilities.
func (r *Directory) SelfServicePermissions() pulumi.Output {
	return r.s.State["selfServicePermissions"]
}

// The identifiers of the subnets where the directory resides.
func (r *Directory) SubnetIds() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["subnetIds"])
}

// A mapping of tags assigned to the WorkSpaces directory.
func (r *Directory) Tags() pulumi.MapOutput {
	return (pulumi.MapOutput)(r.s.State["tags"])
}

// Input properties used for looking up and filtering Directory resources.
type DirectoryState struct {
	// The directory identifier for registration in WorkSpaces service.
	DirectoryId interface{}
	// The permissions to enable or disable self-service capabilities.
	SelfServicePermissions interface{}
	// The identifiers of the subnets where the directory resides.
	SubnetIds interface{}
	// A mapping of tags assigned to the WorkSpaces directory.
	Tags interface{}
}

// The set of arguments for constructing a Directory resource.
type DirectoryArgs struct {
	// The directory identifier for registration in WorkSpaces service.
	DirectoryId interface{}
	// The permissions to enable or disable self-service capabilities.
	SelfServicePermissions interface{}
	// The identifiers of the subnets where the directory resides.
	SubnetIds interface{}
	// A mapping of tags assigned to the WorkSpaces directory.
	Tags interface{}
}
