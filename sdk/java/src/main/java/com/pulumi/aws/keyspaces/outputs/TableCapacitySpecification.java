// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.aws.keyspaces.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class TableCapacitySpecification {
    /**
     * @return The throughput capacity specified for read operations defined in read capacity units (RCUs).
     * 
     */
    private final @Nullable Integer readCapacityUnits;
    /**
     * @return The read/write throughput capacity mode for a table. Valid values: `PAY_PER_REQUEST`, `PROVISIONED`. The default value is `PAY_PER_REQUEST`.
     * 
     */
    private final @Nullable String throughputMode;
    /**
     * @return The throughput capacity specified for write operations defined in write capacity units (WCUs).
     * 
     */
    private final @Nullable Integer writeCapacityUnits;

    @CustomType.Constructor
    private TableCapacitySpecification(
        @CustomType.Parameter("readCapacityUnits") @Nullable Integer readCapacityUnits,
        @CustomType.Parameter("throughputMode") @Nullable String throughputMode,
        @CustomType.Parameter("writeCapacityUnits") @Nullable Integer writeCapacityUnits) {
        this.readCapacityUnits = readCapacityUnits;
        this.throughputMode = throughputMode;
        this.writeCapacityUnits = writeCapacityUnits;
    }

    /**
     * @return The throughput capacity specified for read operations defined in read capacity units (RCUs).
     * 
     */
    public Optional<Integer> readCapacityUnits() {
        return Optional.ofNullable(this.readCapacityUnits);
    }
    /**
     * @return The read/write throughput capacity mode for a table. Valid values: `PAY_PER_REQUEST`, `PROVISIONED`. The default value is `PAY_PER_REQUEST`.
     * 
     */
    public Optional<String> throughputMode() {
        return Optional.ofNullable(this.throughputMode);
    }
    /**
     * @return The throughput capacity specified for write operations defined in write capacity units (WCUs).
     * 
     */
    public Optional<Integer> writeCapacityUnits() {
        return Optional.ofNullable(this.writeCapacityUnits);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(TableCapacitySpecification defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private @Nullable Integer readCapacityUnits;
        private @Nullable String throughputMode;
        private @Nullable Integer writeCapacityUnits;

        public Builder() {
    	      // Empty
        }

        public Builder(TableCapacitySpecification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.readCapacityUnits = defaults.readCapacityUnits;
    	      this.throughputMode = defaults.throughputMode;
    	      this.writeCapacityUnits = defaults.writeCapacityUnits;
        }

        public Builder readCapacityUnits(@Nullable Integer readCapacityUnits) {
            this.readCapacityUnits = readCapacityUnits;
            return this;
        }
        public Builder throughputMode(@Nullable String throughputMode) {
            this.throughputMode = throughputMode;
            return this;
        }
        public Builder writeCapacityUnits(@Nullable Integer writeCapacityUnits) {
            this.writeCapacityUnits = writeCapacityUnits;
            return this;
        }        public TableCapacitySpecification build() {
            return new TableCapacitySpecification(readCapacityUnits, throughputMode, writeCapacityUnits);
        }
    }
}
